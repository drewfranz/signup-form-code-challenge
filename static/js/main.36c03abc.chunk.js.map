{"version":3,"sources":["components/SignUp.js","components/Confirmation.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["SignUp","checkIfFormCanContinue","event","preventDefault","props","validate","nextStep","errors","this","className","hidden","htmlFor","firstName","name","id","type","required","aria-required","value","onChange","handleChange","email","password","minLength","onClick","Component","Confirmation","values","Form","state","pattern","RegExp","isValid","Object","entries","forEach","key","val","test","setState","step","target","handleSubmit","alert","renderSwitch","bind","onSubmit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36c03abc.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './SignUp.css';\n\nexport default class SignUp extends Component {\n\n  // We need to check if valid inputs have been submitted.\n  checkIfFormCanContinue = event => {\n    event.preventDefault();\n\n    // Run the validation function.\n    if (this.props.validate()) {\n      // Validation passed, so move to the next step of the form.\n      this.props.nextStep();\n    }\n  }\n\n  render() {\n    // Get any errors so we can display them.\n    const {errors} = this.props;\n\n    return(\n      <div className=\"sign-up mx-auto shadow p-4 mb-5 bg-white rounded-lg clearfix\">\n        <h2 className=\"sign-up-header\">Let's<br />\n          <span className=\"sign-up-header-emphasis\">Sign Up</span>\n        </h2>\n        <p className=\"help-text\">Use the form below to sign up for this super awesome service. You're only a few steps away!</p>\n        <fieldset className=\"sign-up-fields\">\n          <legend hidden>Your registration information</legend>\n          {/* First Name */}\n          <label htmlFor=\"signup-form-first-name\">First Name</label>\n          <input className={errors.firstName ? 'error' : ''} name=\"firstName\" id=\"signup-form-first-name\" type=\"text\" required aria-required=\"true\" value={this.props.firstName} onChange={this.props.handleChange}></input>\n          <div className=\"text-danger\">{errors.firstName}</div>\n\n          {/* Email Address */}\n          <label htmlFor=\"signup-form-email\">Email Address</label>\n          <input className={errors.email ? 'error' : ''}  name=\"email\" id=\"signup-form-email\" type=\"email\" required aria-required=\"true\" value={this.props.email} onChange={this.props.handleChange}></input>\n          <div className=\"text-danger\">{errors.email}</div>\n\n          {/* Password */}\n          <label htmlFor=\"signup-form-password\">Password</label>\n          <input  className={errors.password ? 'error' : ''}  name=\"password\" id=\"signup-form-password\" type=\"password\" minLength=\"8\" required aria-required=\"true\" value={this.props.password} onChange={this.props.handleChange}></input>\n          <div className=\"text-danger\">{errors.password}</div>\n\n          {/* Submit */}\n          <button className=\"btn-danger rounded-lg p-2 px-4 float-right border-0\" onClick={this.checkIfFormCanContinue}>Sign Up</button>\n        </fieldset>\n      </div>\n    );\n  }\n}","import React, {Component} from 'react';\n\nexport default class Confirmation extends Component {\n    render() {\n        // Get the submited values so we can render them.\n        const {values: {firstName, email}} = this.props;\n\n        return(\n            <div className=\"confirmation mx-auto shadow p-4 mb-5 bg-white rounded-lg clearfix\">\n                <h2>Welcome,<br />\n                <span className=\"header-emphasis\">{firstName}!</span>\n                </h2>\n                <p>You have been registered for this awesome service. Please check your email listed below for instructions.</p>\n                <p className=\"registered-email\">{email}</p>\n                <input type=\"submit\" value=\"Sign In\" className=\"btn-danger rounded-lg p-2 px-4 float-right border-0\" />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport SignUp from './SignUp';\nimport Confirmation from './Confirmation';\nimport './Form.css';\n\nexport default  class Form extends Component {\n  constructor(props) {\n    super(props);\n    // Set up the initial input values.\n    this.state = {\n      step: 1,\n      firstName: '',\n      email: '',\n      password: '',\n      errors: {},\n    };\n\n    // Handle the submission event.\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  validate = () => {\n    // Get the current values.\n    const {firstName, email, password} = this.state;\n    const values = {firstName, email, password};\n    // Set the email regex pattern.\n    const pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n    // Initialize some values.\n    let errors = {};\n    let isValid = true;\n\n    // Check each value submitted.\n    Object.entries(values).forEach(([key, val]) => {\n      // If no value, set generic error.\n      if (val === '') {\n        isValid = false;\n        errors[key] = \"Please enter a valid input.\";\n      } else if (key === 'email') {\n        // If the email is set, check if the string is a valid email pattern. If not, set email specific error.\n        if (!pattern.test(val)) {\n          isValid = false;\n          errors[\"email\"] = \"Please enter valid email address.\";\n        }\n      }\n    });\n\n    // Set the errors created.\n    this.setState({\n      errors: errors,\n    });\n\n    // Return bool of if valid.\n    return isValid;\n  }\n\n  // Iterate the step counter on submit.\n  nextStep = () => {\n    const {step} = this.state;\n    this.setState({\n      step: step +1,\n    });\n  }\n\n  // Set the state values on submit.\n  handleChange = event => {\n    const {name, value} = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  // I'm not submitting this form to anything, so just show an alert if successful.\n  handleSubmit = event => {\n    event.preventDefault();\n    alert(\"Congrats! You've signed in!\");\n  }\n\n  // Determine which step we are on and return the correct component.\n  renderSwitch = (step, values, errors) => {\n    switch (step) {\n      case 1:\n        return <SignUp\n                  nextStep={this.nextStep}\n                  validate={this.validate}\n                  handleChange={this.handleChange}\n                  values={values}\n                  errors={errors} />;\n\n      case 2:\n        return <Confirmation values={values} />;\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    // Set up the render data.\n    const {step, firstName, email, password, errors} = this.state;\n    const values = {firstName, email, password};\n\n    return (\n      <form\n        className=\"container\"\n        onSubmit={this.handleSubmit}>\n        {/* Call the switch function to get the correct component to render. */}\n        {this.renderSwitch(step, values, errors)}\n      </form>\n    );\n  }\n}","import React from 'react';\nimport Form from './components/Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}